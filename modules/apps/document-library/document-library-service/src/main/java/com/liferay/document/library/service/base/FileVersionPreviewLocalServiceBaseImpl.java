/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.document.library.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.document.library.model.FileVersionPreview;
import com.liferay.document.library.service.FileVersionPreviewLocalService;
import com.liferay.document.library.service.persistence.FileVersionPreviewPersistence;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the file version preview local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.document.library.service.impl.FileVersionPreviewLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.document.library.service.impl.FileVersionPreviewLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class FileVersionPreviewLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements FileVersionPreviewLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>FileVersionPreviewLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.document.library.service.FileVersionPreviewLocalServiceUtil</code>.
	 */

	/**
	 * Adds the file version preview to the database. Also notifies the appropriate model listeners.
	 *
	 * @param fileVersionPreview the file version preview
	 * @return the file version preview that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FileVersionPreview addFileVersionPreview(
		FileVersionPreview fileVersionPreview) {

		fileVersionPreview.setNew(true);

		return fileVersionPreviewPersistence.update(fileVersionPreview);
	}

	/**
	 * Creates a new file version preview with the primary key. Does not add the file version preview to the database.
	 *
	 * @param fileVersionPreviewId the primary key for the new file version preview
	 * @return the new file version preview
	 */
	@Override
	@Transactional(enabled = false)
	public FileVersionPreview createFileVersionPreview(
		long fileVersionPreviewId) {

		return fileVersionPreviewPersistence.create(fileVersionPreviewId);
	}

	/**
	 * Deletes the file version preview with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fileVersionPreviewId the primary key of the file version preview
	 * @return the file version preview that was removed
	 * @throws PortalException if a file version preview with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FileVersionPreview deleteFileVersionPreview(
			long fileVersionPreviewId)
		throws PortalException {

		return fileVersionPreviewPersistence.remove(fileVersionPreviewId);
	}

	/**
	 * Deletes the file version preview from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fileVersionPreview the file version preview
	 * @return the file version preview that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public FileVersionPreview deleteFileVersionPreview(
		FileVersionPreview fileVersionPreview) {

		return fileVersionPreviewPersistence.remove(fileVersionPreview);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			FileVersionPreview.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return fileVersionPreviewPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.FileVersionPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return fileVersionPreviewPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.FileVersionPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return fileVersionPreviewPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return fileVersionPreviewPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return fileVersionPreviewPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public FileVersionPreview fetchFileVersionPreview(
		long fileVersionPreviewId) {

		return fileVersionPreviewPersistence.fetchByPrimaryKey(
			fileVersionPreviewId);
	}

	/**
	 * Returns the file version preview with the primary key.
	 *
	 * @param fileVersionPreviewId the primary key of the file version preview
	 * @return the file version preview
	 * @throws PortalException if a file version preview with the primary key could not be found
	 */
	@Override
	public FileVersionPreview getFileVersionPreview(long fileVersionPreviewId)
		throws PortalException {

		return fileVersionPreviewPersistence.findByPrimaryKey(
			fileVersionPreviewId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			fileVersionPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FileVersionPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"fileVersionPreviewId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			fileVersionPreviewLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(FileVersionPreview.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"fileVersionPreviewId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			fileVersionPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(FileVersionPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName(
			"fileVersionPreviewId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return fileVersionPreviewLocalService.deleteFileVersionPreview(
			(FileVersionPreview)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return fileVersionPreviewPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the file version previews.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.FileVersionPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of file version previews
	 * @param end the upper bound of the range of file version previews (not inclusive)
	 * @return the range of file version previews
	 */
	@Override
	public List<FileVersionPreview> getFileVersionPreviews(int start, int end) {
		return fileVersionPreviewPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of file version previews.
	 *
	 * @return the number of file version previews
	 */
	@Override
	public int getFileVersionPreviewsCount() {
		return fileVersionPreviewPersistence.countAll();
	}

	/**
	 * Updates the file version preview in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param fileVersionPreview the file version preview
	 * @return the file version preview that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public FileVersionPreview updateFileVersionPreview(
		FileVersionPreview fileVersionPreview) {

		return fileVersionPreviewPersistence.update(fileVersionPreview);
	}

	/**
	 * Returns the file version preview local service.
	 *
	 * @return the file version preview local service
	 */
	public FileVersionPreviewLocalService getFileVersionPreviewLocalService() {
		return fileVersionPreviewLocalService;
	}

	/**
	 * Sets the file version preview local service.
	 *
	 * @param fileVersionPreviewLocalService the file version preview local service
	 */
	public void setFileVersionPreviewLocalService(
		FileVersionPreviewLocalService fileVersionPreviewLocalService) {

		this.fileVersionPreviewLocalService = fileVersionPreviewLocalService;
	}

	/**
	 * Returns the file version preview persistence.
	 *
	 * @return the file version preview persistence
	 */
	public FileVersionPreviewPersistence getFileVersionPreviewPersistence() {
		return fileVersionPreviewPersistence;
	}

	/**
	 * Sets the file version preview persistence.
	 *
	 * @param fileVersionPreviewPersistence the file version preview persistence
	 */
	public void setFileVersionPreviewPersistence(
		FileVersionPreviewPersistence fileVersionPreviewPersistence) {

		this.fileVersionPreviewPersistence = fileVersionPreviewPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.liferay.document.library.model.FileVersionPreview",
			fileVersionPreviewLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.document.library.model.FileVersionPreview");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return FileVersionPreviewLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return FileVersionPreview.class;
	}

	protected String getModelClassName() {
		return FileVersionPreview.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				fileVersionPreviewPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = FileVersionPreviewLocalService.class)
	protected FileVersionPreviewLocalService fileVersionPreviewLocalService;

	@BeanReference(type = FileVersionPreviewPersistence.class)
	protected FileVersionPreviewPersistence fileVersionPreviewPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}