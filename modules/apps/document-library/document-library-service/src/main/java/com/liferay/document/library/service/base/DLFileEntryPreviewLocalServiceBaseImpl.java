/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.document.library.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.document.library.model.DLFileEntryPreview;
import com.liferay.document.library.service.DLFileEntryPreviewLocalService;
import com.liferay.document.library.service.persistence.DLFileEntryPreviewPersistence;
import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the dl file entry preview local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.document.library.service.impl.DLFileEntryPreviewLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.liferay.document.library.service.impl.DLFileEntryPreviewLocalServiceImpl
 * @generated
 */
@ProviderType
public abstract class DLFileEntryPreviewLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements DLFileEntryPreviewLocalService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>DLFileEntryPreviewLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>com.liferay.document.library.service.DLFileEntryPreviewLocalServiceUtil</code>.
	 */

	/**
	 * Adds the dl file entry preview to the database. Also notifies the appropriate model listeners.
	 *
	 * @param dlFileEntryPreview the dl file entry preview
	 * @return the dl file entry preview that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DLFileEntryPreview addDLFileEntryPreview(
		DLFileEntryPreview dlFileEntryPreview) {

		dlFileEntryPreview.setNew(true);

		return dlFileEntryPreviewPersistence.update(dlFileEntryPreview);
	}

	/**
	 * Creates a new dl file entry preview with the primary key. Does not add the dl file entry preview to the database.
	 *
	 * @param fileEntryPreviewId the primary key for the new dl file entry preview
	 * @return the new dl file entry preview
	 */
	@Override
	@Transactional(enabled = false)
	public DLFileEntryPreview createDLFileEntryPreview(
		long fileEntryPreviewId) {

		return dlFileEntryPreviewPersistence.create(fileEntryPreviewId);
	}

	/**
	 * Deletes the dl file entry preview with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param fileEntryPreviewId the primary key of the dl file entry preview
	 * @return the dl file entry preview that was removed
	 * @throws PortalException if a dl file entry preview with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DLFileEntryPreview deleteDLFileEntryPreview(long fileEntryPreviewId)
		throws PortalException {

		return dlFileEntryPreviewPersistence.remove(fileEntryPreviewId);
	}

	/**
	 * Deletes the dl file entry preview from the database. Also notifies the appropriate model listeners.
	 *
	 * @param dlFileEntryPreview the dl file entry preview
	 * @return the dl file entry preview that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DLFileEntryPreview deleteDLFileEntryPreview(
		DLFileEntryPreview dlFileEntryPreview) {

		return dlFileEntryPreviewPersistence.remove(dlFileEntryPreview);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			DLFileEntryPreview.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return dlFileEntryPreviewPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.DLFileEntryPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return dlFileEntryPreviewPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.DLFileEntryPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return dlFileEntryPreviewPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return dlFileEntryPreviewPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return dlFileEntryPreviewPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public DLFileEntryPreview fetchDLFileEntryPreview(long fileEntryPreviewId) {
		return dlFileEntryPreviewPersistence.fetchByPrimaryKey(
			fileEntryPreviewId);
	}

	/**
	 * Returns the dl file entry preview with the primary key.
	 *
	 * @param fileEntryPreviewId the primary key of the dl file entry preview
	 * @return the dl file entry preview
	 * @throws PortalException if a dl file entry preview with the primary key could not be found
	 */
	@Override
	public DLFileEntryPreview getDLFileEntryPreview(long fileEntryPreviewId)
		throws PortalException {

		return dlFileEntryPreviewPersistence.findByPrimaryKey(
			fileEntryPreviewId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			dlFileEntryPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DLFileEntryPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("fileEntryPreviewId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			dlFileEntryPreviewLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(DLFileEntryPreview.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"fileEntryPreviewId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			dlFileEntryPreviewLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DLFileEntryPreview.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("fileEntryPreviewId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return dlFileEntryPreviewLocalService.deleteDLFileEntryPreview(
			(DLFileEntryPreview)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return dlFileEntryPreviewPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the dl file entry previews.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code>), then the query will include the default ORDER BY logic from <code>com.liferay.document.library.model.impl.DLFileEntryPreviewModelImpl</code>. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of dl file entry previews
	 * @param end the upper bound of the range of dl file entry previews (not inclusive)
	 * @return the range of dl file entry previews
	 */
	@Override
	public List<DLFileEntryPreview> getDLFileEntryPreviews(int start, int end) {
		return dlFileEntryPreviewPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of dl file entry previews.
	 *
	 * @return the number of dl file entry previews
	 */
	@Override
	public int getDLFileEntryPreviewsCount() {
		return dlFileEntryPreviewPersistence.countAll();
	}

	/**
	 * Updates the dl file entry preview in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param dlFileEntryPreview the dl file entry preview
	 * @return the dl file entry preview that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DLFileEntryPreview updateDLFileEntryPreview(
		DLFileEntryPreview dlFileEntryPreview) {

		return dlFileEntryPreviewPersistence.update(dlFileEntryPreview);
	}

	/**
	 * Returns the dl file entry preview local service.
	 *
	 * @return the dl file entry preview local service
	 */
	public DLFileEntryPreviewLocalService getDLFileEntryPreviewLocalService() {
		return dlFileEntryPreviewLocalService;
	}

	/**
	 * Sets the dl file entry preview local service.
	 *
	 * @param dlFileEntryPreviewLocalService the dl file entry preview local service
	 */
	public void setDLFileEntryPreviewLocalService(
		DLFileEntryPreviewLocalService dlFileEntryPreviewLocalService) {

		this.dlFileEntryPreviewLocalService = dlFileEntryPreviewLocalService;
	}

	/**
	 * Returns the dl file entry preview persistence.
	 *
	 * @return the dl file entry preview persistence
	 */
	public DLFileEntryPreviewPersistence getDLFileEntryPreviewPersistence() {
		return dlFileEntryPreviewPersistence;
	}

	/**
	 * Sets the dl file entry preview persistence.
	 *
	 * @param dlFileEntryPreviewPersistence the dl file entry preview persistence
	 */
	public void setDLFileEntryPreviewPersistence(
		DLFileEntryPreviewPersistence dlFileEntryPreviewPersistence) {

		this.dlFileEntryPreviewPersistence = dlFileEntryPreviewPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService
		getCounterLocalService() {

		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService
			counterLocalService) {

		this.counterLocalService = counterLocalService;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register(
			"com.liferay.document.library.model.DLFileEntryPreview",
			dlFileEntryPreviewLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.liferay.document.library.model.DLFileEntryPreview");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DLFileEntryPreviewLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DLFileEntryPreview.class;
	}

	protected String getModelClassName() {
		return DLFileEntryPreview.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource =
				dlFileEntryPreviewPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = DLFileEntryPreviewLocalService.class)
	protected DLFileEntryPreviewLocalService dlFileEntryPreviewLocalService;

	@BeanReference(type = DLFileEntryPreviewPersistence.class)
	protected DLFileEntryPreviewPersistence dlFileEntryPreviewPersistence;

	@ServiceReference(
		type = com.liferay.counter.kernel.service.CounterLocalService.class
	)
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry
		persistedModelLocalServiceRegistry;

}