{namespace DDMSelect}

/**
 * Defines the delegated template for the select field.
 */
{deltemplate ddm.field variant="'select'"}
	{call .render data="all" /}
{/deltemplate}

/**
 * Prints the DDM form select field.
 */
{template .render}
	{@param name: string}
	{@param options: list<[label: string, value: string, selected: string]>}
	{@param pathThemeImages: string}
	{@param predefinedValue: list<string>}
	{@param strings: [chooseAnOption: string, chooseOptions: string, search: string, emptyList: string]}
	{@param value: list<string>}
	{@param visible: bool}
	{@param? dir: string}
	{@param? fixedOptions: list<[label: string, value: string, selected: string]>}
	{@param? label: string}
	{@param? labelCloseIcon: html}
	{@param? multiple: bool}
	{@param? open: bool}
	{@param? paddingBottom: number}
	{@param? paddingTop: number}
	{@param? readOnly: bool}
	{@param? required: bool}
	{@param? selectCaretDoubleIcon: html}
	{@param? selectedLabels: ?}
	{@param? selectSearchIcon: html}
	{@param? showLabel: bool}
	{@param? showPlaceholderOption: bool}
	{@param? showSearch: bool}
	{@param? tip: string}

	{let $displayValues: length($value) > 0 ? $value : length($predefinedValue) > 0 ? $predefinedValue : null /}

	<div class="form-group{$visible ? '' : ' hide'}" data-fieldname="{$name}">
		<div class="input-select-wrapper">
			{call .select_label data="all" /}

			<div class="form-builder-select-field input-group-container">
				{if not $readOnly and $displayValues}
					{call .hidden_select}
						{param dir: $dir /}
						{param displayValues: $displayValues /}
						{param multiple: $multiple /}
						{param name: $name /}
						{param options: $options /}
						{param strings: $strings /}
					{/call}
				{/if}

				{if ($fixedOptions) and (length($fixedOptions) > 0)}
					{if not $readOnly and $displayValues}
						{call .hidden_select}
							{param dir: $dir /}
							{param displayValues: $displayValues /}
							{param multiple: $multiple /}
							{param name: $name /}
							{param options: $fixedOptions /}
							{param strings: $strings /}
						{/call}
					{/if}
				{/if}

				<div class="form-control select-field-trigger" {if $dir}dir="{$dir}"{/if} id="{$name}" name="{$name}" {if $readOnly} disabled{/if} tabindex="0">
					{if $multiple}
						{if $displayValues}
							<ul class="multiple-label-list">
								{foreach $displayValue in $displayValues}
									{call .label_item}
										{param label: $selectedLabels and $selectedLabels[$displayValue] ? $selectedLabels[$displayValue] : $displayValue /}
										{param labelCloseIcon: $labelCloseIcon /}
										{param readOnly: $readOnly /}
										{param value: $displayValue /}
									{/call}
								{/foreach}

								{if $fixedOptions}
									{foreach $fixedOption in $fixedOptions}
										{if $fixedOption.selected == 'true'}
											{call .label_item}
												{param label: $fixedOption.label /}
												{param labelCloseIcon: $labelCloseIcon /}
												{param readOnly: $readOnly /}
												{param value: $fixedOption.value /}
											{/call}
										{/if}
									{/foreach}
								{/if}
							</ul>
						{else}
							<div class="option-selected option-selected-placeholder">{$strings.chooseOptions}</div>
						{/if}
					{else}
						{if $displayValues}
							{foreach $option in $options}
								{if $option.selected == 'true'}
									<div class="option-selected" title="{$option.label}">{$option.label}</div>
								{/if}
							{/foreach}

							{if $fixedOptions}
								{foreach $fixedOption in $fixedOptions}
									{if $fixedOption.selected == 'true'}
										<div class="option-selected" title="{$fixedOption.label}">{$fixedOption.label}</div>
									{/if}
								{/foreach}
							{/if}
						{else}
							<div class="option-selected option-selected-placeholder">{$strings.chooseAnOption}</div>
						{/if}
					{/if}

					<a class="select-arrow-down-container" {if not $readOnly}href="javascript:;"{/if} tabindex="-1">
						{if $selectCaretDoubleIcon}
							{$selectCaretDoubleIcon}
						{/if}
					</a>
				</div>

				{if not $readOnly and $open}
					<div class="drop-chosen{$open ? '' : ' hide'}">
						<div class="dropdown-menu">
							{if $showSearch}
								<div class="dropdown-section">
									<div class="input-group input-group-sm">
										<div class="input-group-item">
											<input autocomplete="off" class="drop-chosen-search form-control input-group-inset input-group-inset-after" placeholder="{$strings.search}" type="text">
											<span class="input-group-inset-item input-group-inset-item-after">
												<button class="btn btn-unstyled" type="button" tabindex="-1">
													{if $selectSearchIcon}
														{$selectSearchIcon}
													{/if}
												</button>
											</span>
										</div>
									</div>
								</div>
							{/if}

							{call .select_options data="all" /}
						</div>
					</div>
				{/if}
			</div>

			{if $showLabel and $tip}
				<span class="form-text">{$tip}</span>
			{/if}
		</div>
	</div>
{/template}

/**
 * Prints the label item.
 */
{template .label_item}
	{@param label: string}
	{@param value: string}
	{@param? labelCloseIcon: html}
	{@param? readOnly: bool}

	<li>
		<span class="label label-lg label-secondary lfr-portal-tooltip multiple-label" data-original-title="{$label}" data-title="{$label}">
			<span class="text-truncate-inline">
				<span class="text-truncate">{$label}</span>

				{if not $readOnly}
					<span class="label-item label-item-after">
						<button aria-label="Close" class="btn btn-unstyled close trigger-label-item-close" data-label-value="{$value}" type="button">
							{if $labelCloseIcon}
								{$labelCloseIcon}
							{/if}
						</button>
					</span>
				{/if}
			</span>
		</span>
	</li>
{/template}

/**
 * Prints the select label.
 */
{template .select_label}
	{@param name: string}
	{@param pathThemeImages: string}
	{@param? label: string}
	{@param? required: bool}
	{@param? showLabel: bool}

	{if $showLabel or $required}
		<label for="{$name}">
			{if $showLabel}
				{$label}{sp}
			{/if}

			{if $required}
				<svg aria-hidden="true"
					 class="lexicon-icon lexicon-icon-asterisk reference-mark">
					<use xlink:href="{$pathThemeImages}/lexicon/icons.svg#asterisk"/>
				</svg>
			{/if}
		</label>
	{/if}

{/template}

/**
 * Prints hidden select tag.
 */
{template .hidden_select}
	{@param displayValues: list<string>}
	{@param name: string}
	{@param options: list<[label: string, value: string, selected: string]>}
	{@param strings: [chooseAnOption: string, chooseOptions: string, search: string, emptyList: string]}
	{@param? multiple: bool}

	<select class="form-control hide" id="{$name}" name="{$name}" {if $multiple}multiple size="{length($options)}"{/if}>
		<option disabled {if length($displayValues) == 0}selected{/if} value="">
			{$strings.chooseAnOption}
		</option>

		{foreach $value in $displayValues}
			{call .select_hidden_options}
				{param value: $value /}
			{/call}
		{/foreach}
	</select>
{/template}

/**
 * Prints the DDM form hidden select options.
 */
{template .select_hidden_options}
	{@param value: string}

	<option selected value="{$value}"></option>
{/template}

{template .select_option_placeholder}
	{@param strings: [chooseAnOption: string, chooseOptions: string, search: string, emptyList: string]}
	{@param value: list<string>}

	<li class="select-option-item" tabindex="0">
		{let $itemAttributes kind="attributes"}
			class="
			{if length($value) == 0} active{sp} {/if}

			dropdown-item{sp}

			placeholder-dropdown-item
			"

			tabindex="-1"

			title="{$strings.chooseAnOption}"
		{/let}
		<a {$itemAttributes}>
			{$strings.chooseAnOption}
		</a>
	</li>
{/template}

/**
 * Prints the DDM form select field UI itens.
 */
{template .select_options}
	{@param options: list<[label: string, value: string, selected: string]>}
	{@param strings: [chooseAnOption: string, chooseOptions: string, search: string, emptyList: string]}
	{@param value: list<string>}
	{@param? fixedOptions: list<[label: string, value: string, selected: string]>}
	{@param? multiple: bool}
	{@param? showPlaceholderOption: bool}
	{@param? paddingTop: number}
	{@param? paddingBottom: number}

	<ul class="dropdown-visible list-unstyled results-chosen">
		<div class="inline-scroller">
			{if $showPlaceholderOption}
				{call .select_option_placeholder data="all" /}
			{/if}

			<div class="virtual-scroller-padding" style="padding-bottom: {$paddingBottom}px; padding-top: {$paddingTop ?: 0}px">
				{call .plot_dropdown_rows}
					{param fixed: false /}
					{param multiple: $multiple /}
					{param options: $options /}
				{/call}
			</div>
		</div>

		{if $fixedOptions}
			{if length($options) > 0 and length($fixedOptions) > 0}
				<div class="dropdown-divider"></div>
			{/if}

			{call .plot_dropdown_rows}
				{param fixed: true /}
				{param multiple: $multiple /}
				{param options: $fixedOptions /}
			{/call}
		{/if}

		{if $fixedOptions and length($fixedOptions) == 0 and length($options) == 0}
			<li class="no-results-list">
				<span>
					{$strings.emptyList}
				</span>
			</li>
		{/if}
	</ul>
{/template}

/**
 * Prints the DDM dropdown itens.
 */
{template .plot_dropdown_rows}
	{@param options: list<[label: string, value: string, selected: string]>}
	{@param? fixed: bool}
	{@param? multiple: bool}

	{foreach $option in $options}
		{if $multiple}
			{call .multiple_selection}
				{param fixed: $fixed /}
				{param indexOption: index($option) /}
				{param option: $option /}
			{/call}
		{else}
			{call .simple_selection}
				{param fixed: $fixed /}
				{param indexOption: index($option) /}
				{param option: $option /}
			{/call}
		{/if}
	{/foreach}
{/template}

/**
 * Prints the DDM multiple dropdown itens.
 */
{template .multiple_selection}
	{@param indexOption: int}
	{@param option: [label: string, value: string, selected: string]}
	{@param? fixed: bool}

	{let $attributesMultipleSelection kind="attributes"}
		class="
			{if $option.selected == 'true'}active{/if}

			{sp}dropdown-item

			{if $fixed}
				{sp}fixed
			{else}
				{sp}unfixed
			{/if}

			{sp}select-option-item
		"

		data-option-index="{$indexOption}"

		data-option-value="{$option.value}"

		data-option-selected="{if $option.selected == 'true'}true{/if}"

		key="{$option.value}"

		ref="{$option.value}"
	{/let}

	<li {$attributesMultipleSelection}>
		<div class="custom-checkbox custom-control">
			<label>
				<input {if $option.selected == 'true'}checked{/if} class="custom-control-input" type="checkbox" value="">
				<span class="custom-control-label ">
					<span class="custom-control-label-text">{$option.label}</span>
				</span>
			</label>
		</div>
	</li>
{/template}

/**
 * Prints the DDM normal dropdown itens.
 */
{template .simple_selection}
	{@param indexOption: int}
	{@param option: [label: string, value: string, selected: string]}
	{@param? fixed: bool}

	{let $attributesNormalSelection kind="attributes"}
		class="

			{sp}select-option-item

			{if $fixed}
				{sp}fixed
			{else}
				{sp}unfixed
			{/if}
		"
		data-option-index="{$indexOption}"

		data-option-selected="{if $option.selected == 'true'}true{/if}"

		data-option-value="{$option.value}"
	{/let}

	<li {$attributesNormalSelection} tabindex="0">
		{let $itemAttributes kind="attributes"}
			class="
				dropdown-item

				{if $option.selected == 'true'}
					{sp}active
				{/if}
			"

			href="javascript:;"

			tabindex="-1"

			title="{$option.label}"
		{/let}

		<a {$itemAttributes}>
			{$option.label}
		</a>
	</li>

{/template}