definition {

	@summary = "Add a child site to a valid site."
	macro addChildSite {
		Variables.assertDefined(parameterList = "${groupName},${parentGroupName}");

		if (isSet(groupDescription)) {
			var groupDescriptionEncoded = URLUtil.encodeUTF8("${groupDescription}");

			var groupDescriptionMap = '''{"en_US":"${groupDescriptionEncoded}"}''';
		}
		else {
			var groupDescriptionMap = "{}";
		}

		var groupNameEncoded = URLUtil.encodeUTF8("${groupName}");

		var groupName = '''{"en_US":"${groupNameEncoded}"}''';

		var parentGroupId = JSONGroupAPI._getSiteIdByGroupName(groupName = "${parentGroupName}");

		JSONGroupAPI._addGroup(
			groupDescription = "${groupDescription}",
			groupName = "${groupName}",
			parentGroupName = "${parentGroupName}");
	}

	@summary = "Add a basic site"
	macro addGroup {
		Variables.assertDefined(parameterList = "${groupName}");

		if (isSet(groupDescription)) {
			var groupDescriptionEncoded = URLUtil.encodeUTF8("${groupDescription}");

			var groupDescriptionMap = '''{"en_US":"${groupDescriptionEncoded}"}''';
		}
		else {
			var groupDescriptionMap = "{}";
		}

		var groupNameEncoded = URLUtil.encodeUTF8("${groupName}");

		var groupName = '''{"en_US":"${groupNameEncoded}"}''';

		var parentGroupId = "0";

		JSONGroupAPI._addGroup(
			groupDescription = "${groupDescription}",
			groupName = "${groupName}");
	}

	macro assignGroupRoleToUser {
		Variables.assertDefined(parameterList = "${groupName},${roleTitle},${userEmailAddress}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var roleId = JSONRole.getRoleIdByName(roleTitle = "${roleTitle}");

		var userId = JSONUser.getUserIdByEmailAddress(userEmailAddress = "${userEmailAddress}");

		JSONGroupAPI._assignGroupRoleToUser(
			groupId = "${groupId}",
			roleId = "${roleId}",
			userId = "${userId}");
	}

	macro assignUserToGroup {
		Variables.assertDefined(parameterList = "${groupName},${userEmailAddress}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var userId = JSONUser.getUserIdByEmailAddress(userEmailAddress = "${userEmailAddress}");

		JSONGroupAPI._assignUserToGroup(
			groupId = "${groupId}",
			userId = "${userId}");
	}

	@summary = "Delete a valid group using its groupName"
	macro deleteGroupByName {
		Variables.assertDefined(parameterList = "${groupName}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		JSONGroupAPI._deleteGroup(groupId = "${groupId}");
	}

}