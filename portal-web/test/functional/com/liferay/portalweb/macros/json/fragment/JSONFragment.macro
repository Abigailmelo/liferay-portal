definition {

	@summary = "Add a basic fragment collection."
	macro addFragmentCollection {
		if (isSet(groupName)) {
			var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");
		}
		else if (isSet(groupKey)) {
			var groupId = JSONGroupAPI._getGroupIdByGroupKey(groupKey = "${groupKey}", site = "${site}");
		}
		else {
			fail("Please set 'groupKey or groupName to get groupId'.");
		}

		Variables.assertDefined(parameterList = "${name}");

		JSONFragmentAPI._addFragmentCollection(
			groupId = "${groupId}",
			name = "${name}");
	}

	@summary = "Add a section to a fragment collection."
	macro addSection {
		if (isSet(groupName)) {
			var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");
		}
		else if (isSet(groupKey)) {
			var groupId = JSONGroupAPI._getGroupIdByGroupKey(groupKey = "${groupKey}", site = "${site}");
		}
		else {
			fail("Please set 'groupKey or groupName to get groupId'.");
		}

		Variables.assertDefined(parameterList = "${collectionName},${name}");

		var collectionId = JSONFragmentAPI._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		JSONFragmentAPI._addSection(
			collectionId = "${collectionId}",
			configuration = "${configuration}",
			groupId = "${groupId}",
			html = "${html}",
			name = "${name}",
			status = "${status}",
			type = "${type}");
	}

	@summary = "Assert that a fragmentCollection does not exist in a group given its collectionName and groupName"
	macro assertFragmentCollectionInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${groupName}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var collectionNameResult = JSONFragmentAPI._getCollectionName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		if ("${collectionNameResult}" == "[]") {
			fail("The collection ${collectionName} was not found.");
		}
		else {
			echo("The collection ${collectionName} was found.");
		}
	}

	@summary = "Assert that a fragmentCollection does not exist in a group given its collectionName and groupName"
	macro assertFragmentCollectionNotInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${groupName}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var collectionNameResult = JSONFragmentAPI._getCollectionName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		if ("${collectionNameResult}" == "[]") {
			echo("The collection ${collectionName} was not found.");
		}
		else {
			fail("The collection ${collectionName} was found.");
		}
	}

	@summary = "Assert that a fragment exists in a fragmentCollection given its collectionName, fragmentName, and groupName"
	macro assertFragmentInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName},${groupName}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var fragmentCollectionId = JSONFragmentAPI._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		var fragmentNameResult = JSONFragmentAPI._getFragmentName(
			fragmentCollectionId = "${fragmentCollectionId}",
			fragmentName = "${fragmentName}",
			groupId = "${groupId}"
		);

		if ("${fragmentNameResult}" == "[]") {
			fail("The fragment ${fragmentName} was not found.");
		}
		else {
			echo("The fragment ${fragmentName} was found.");
		}
	}

	@summary = "Assert that a fragment does not exist in a group given its fragmentName"
	macro assertFragmentNotInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName},${groupName}");

		var groupId = JSONGroupAPI._getGroupIdByName(groupName = "${groupName}");

		var fragmentCollectionId = JSONFragmentAPI._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		var fragmentNameResult = JSONFragmentAPI._getFragmentName(
			fragmentCollectionId = "${fragmentCollectionId}",
			fragmentName = "${fragmentName}",
			groupId = "${groupId}"
		);

		if ("${fragmentNameResult}" == "[]") {
			echo("The fragment ${fragmentName} was not found.");
		}
		else {
			fail("The fragment ${fragmentName} was found.");
		}
	}

}