definition {

	@summary = "Directly calls the JSON WS API to add a layout"
	macro _addLayout {
		if (isSet(parentLayoutName)) {
			var parentLayoutId = JSONLayout._getLayoutIdByName(
				groupId = "${groupId}",
				layoutName = "${parentLayoutName}",
				privateLayout = "${privateLayout}"
			);
		}
		else {
			var parentLayoutId = "0";
		}

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/layout/add-layout \
				-u test@liferay.com:test \
				-d groupId=${groupId} \
				-d privateLayout=${privateLayout} \
				-d parentLayoutId=${parentLayoutId} \
				-d name=${layoutName} \
				-d title= \
				-d description= \
				-d type=${type} \
				-d hidden=false \
				-d friendlyURL=
		''';

		var groupName = JSONGroup._getGroupName(groupId = "${groupId}");

		echo("## Adding a 'Layout' with the following info using JSONWS:");

		echo("## * Group Name: ${groupName}");

		echo("## * Layout Name: ${layoutName}");

		var layoutId = JSONCurlUtil.post("${curl}", "$['layoutId']");
	}

	@summary = "Get the layoutId from a layout by using groupId and layoutName"
	macro _getLayoutIdByName {
		Variables.assertDefined(parameterList = "${groupId},${layoutName}");

		if (!("${privateLayout}" == "true")) {
			var privateLayout = "false";
		}

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/layout/get-layouts \
				-u test@liferay.com:test \
				-d groupId=${groupId} \
				-d privateLayout=${privateLayout}
		''';
		var layoutId = JSONCurlUtil.post("${curl}", "$.[?(@['nameCurrentValue'] == '${layoutName}')]['layoutId']");
		var layoutId = StringUtil.replace("${layoutId}", "[&quot;", "");
		var layoutId = StringUtil.replace("${layoutId}", "&quot;]", "");

		if ("${layoutId}" == "[]") {
			fail("FAIL. Cannot find layout.");
		}
		else {
			echo("FOUND. Returning layoutId: ${groupId}");
		}

		return "${layoutId}";
	}

	@summary = = "Get the typeSettings from a layout by using groupId and layoutName"
	macro _getTypeSettingsByName {
		Variables.assertDefined(parameterList = "${groupId},${layoutName}");

		if (!("${privateLayout}" == "true")) {
			var privateLayout = "false";
		}

		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/layout/get-layouts \
				-u test@liferay.com:test \
				-d groupId=${groupId} \
				-d privateLayout=${privateLayout}
		''';
		var typeSettings = JSONCurlUtil.post("${curl}", "$.[?(@['nameCurrentValue'] == '${layoutName}')]['typeSettings']");
		var typeSettings = StringUtil.replace("${typeSettings}", "[&quot;", "");
		var typeSettings = StringUtil.replace("${typeSettings}", "&quot;]", "");

		if ("${typeSettings}" == "[]") {
			fail("FAIL. Cannot find layout.");
		}
		else {
			echo("FOUND. Returning typeSettings: ${typeSettings}");
		}

		return "${typeSettings}";
	}

	@summary = "Add a private site page or private child site page to an existing site or child site via groupKey"
	macro addPrivateLayout {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(type))) {
			var type = "portlet";
		}

		var groupId = JSONGroup._getSiteIdByGroupName(groupName = "${groupName}");

		JSONLayout._addLayout(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			parentLayoutName = "${parentLayoutName}",
			privateLayout = "true",
			type = "${type}");
	}

	@summary = "Add a private site page or private child site page to an existing site via groupName"
	macro addPrivateLayoutByGroupName {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(type))) {
			var type = "portlet";
		}

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		JSONLayout._addLayout(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			parentLayoutName = "${parentLayoutName}",
			privateLayout = "true",
			type = "${type}");
	}

	@summary = "Add a public site page  or public child site page to an existing site or child site via groupKey"
	macro addPublicLayout {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(type))) {
			var type = "portlet";
		}

		var groupId = JSONGroup._getSiteIdByGroupName(groupName = "${groupName}");

		JSONLayout._addLayout(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			parentLayoutName = "${parentLayoutName}",
			privateLayout = "false",
			type = "${type}");
	}

	@summary = "Add a public site page or public child site page to an existing site via groupName"
	macro addPublicLayoutByGroupName {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(type))) {
			var type = "portlet";
		}

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		JSONLayout._addLayout(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			parentLayoutName = "${parentLayoutName}",
			privateLayout = "false",
			type = "${type}");
	}

	@summary = "Add a widget to a private layout via widgetName"
	macro addWidgetToPrivateLayout {
		if (!(isSet(column))) {
			var column = "1";
		}

		Variables.assertDefined(parameterList = "${groupName},${layoutName},${widgetName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var layoutId = JSONLayout._getLayoutIdByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "true");

		var typeSettings = JSONLayout._getTypeSettingsByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "true");

		var typeSettings = JSONTypeSettingsUtil._addWidgetToTypeSettings(
			column = "${column}",
			widgetName = "${widgetName}",
			typeSettings = "${typeSettings}");

		JSONTypeSettingsUtil._updateTypeSettings(
			groupId = "${groupId}",
			layoutId = "${layoutId}",
			privateLayout = "true",
			typeSettings = "${typeSettings}");
	}

	@summary = "Add a widget to a public layout via widgetName"
	macro addWidgetToPublicLayout {
		if (!(isSet(column))) {
			var column = "1";
		}

		Variables.assertDefined(parameterList = "${groupName},${layoutName},${widgetName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var layoutId = JSONLayout._getLayoutIdByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "false");

		var typeSettings = JSONLayout._getTypeSettingsByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "false");

		var typeSettings = JSONTypeSettingsUtil._addWidgetToTypeSettings(
			column = "${column}",
			widgetName = "${widgetName}",
			typeSettings = "${typeSettings}");

		JSONTypeSettingsUtil._updateTypeSettings(
			groupId = "${groupId}",
			layoutId = "${layoutId}",
			privateLayout = "false",
			typeSettings = "${typeSettings}");
	}

	macro updateLayoutTemplateOfPublicLayout {
		Variables.assertDefined(parameterList = "${groupName},${layoutName},${layoutTemplate}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var layoutId = JSONLayout._getLayoutIdByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "false");

		var typeSettings = JSONLayout._getTypeSettingsByName(
			groupId = "${groupId}",
			layoutName = "${layoutName}",
			privateLayout = "false");

		var typeSettings = JSONTypeSettingsUtil._updateLayoutTemplateId(
			layoutTemplate = "${layoutTemplate}",
			typeSettings = "${typeSettings}");

		JSONTypeSettingsUtil._updateTypeSettings(
			groupId = "${groupId}",
			layoutId = "${layoutId}",
			privateLayout = "false",
			typeSettings = "${typeSettings}");
	}

}