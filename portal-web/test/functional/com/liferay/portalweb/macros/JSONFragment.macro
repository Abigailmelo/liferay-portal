definition {

	@summary = "Directly calls the JSON WS API to add a fragment collection"
	macro _addFragmentCollection {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/fragment.fragmentcollection/add-fragment-collection \
			-u test@liferay.com:test \
			-d groupId=${groupId} \
			-d name=${name} \
			-d description=
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Directly calls the JSON WS API to add a fragment (default type is section)"
	macro _addSection {
		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(html))) {
			var html = "test";
		}

		if (!(isSet(configuration))) {
			var configuration = "";
		}

		if (!(isSet(type))) {
			var type = "0";
		}

		if (!(isSet(status))) {
			var status = "0";
		}

		var curl = '''
			${portalURL}/api/jsonws/fragment.fragmententry/add-fragment-entry \
			-u test@liferay.com:test \
			-d groupId=${groupId} \
			-d fragmentCollectionId=${collectionId} \
			-d fragmentEntryKey= \
			-d name=${name} \
			-d css= \
			-d html=${html} \
			-d js= \
			-d configuration=${configuration} \
			-d previewFileEntryId=0 \
			-d type=${type} \
			-d status=${status}
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post("${curl}");
	}

	@summary = "Get the collectionId from a collection by using collectionName and groupId"
	macro _getCollectionIdByName {
		Variables.assertDefined(parameterList = "${groupId},${collectionName}");

		var portalURL = JSONCompany.getPortalURL();

		var groupName = JSONGroup._getGroupName(groupId = "${groupId}");

		var curl = '''
			${portalURL}/api/jsonws/fragment.fragmentcollection/get-fragment-collections \
			-u test@liferay.com:test \
			-d groupId=${groupId} \
			-d name=${collectionName} \
			-d <CURL_DATA[start=-1]CURL_DATA> \
			-d <CURL_DATA[end=-1]CURL_DATA> \
			-d -orderByComparator=
		''';
		var collectionId = JSONCurlUtil.post("${curl}", "$..fragmentCollectionId");
		var collectionId = StringUtil.replace("${collectionId}", "[&quot;", "");
		var collectionId = StringUtil.replace("${collectionId}", "&quot;]", "");

		if ("${collectionId}" == "[]") {
			fail("FAIL. Cannot find collection.");
		}
		else {
			echo("FOUND. Returning collectionId: ${collectionId}");
		}

		return "${collectionId}";
	}

	@summary = "Get the collectionName by using collectionName"
	macro _getCollectionName {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/fragment.fragmentcollection/get-fragment-collections \
			-u test@liferay.com:test \
			-d groupId=${groupId} \
			-d name=${collectionName} \
			-d <CURL_DATA[start=-1]CURL_DATA> \
			-d <CURL_DATA[end=-1]CURL_DATA> \
			-d -orderByComparator=
		''';
		var collectionNameResult = JSONCurlUtil.post("${curl}", "$..[?(@['name'] == '${collectionName}')]");

		return "${collectionNameResult}";
	}

	@summary = "Get the fragmentName from a fragmentCollection by using fragmentName "
	macro _getFragmentName {
		var portalURL = JSONCompany.getPortalURL();

		var curl = '''
			${portalURL}/api/jsonws/fragment.fragmententry/get-fragment-entries \
			-u test@liferay.com:test \
			-d groupId=${groupId} \
			-d fragmentCollectionId=${fragmentCollectionId} \
			-d <CURL_DATA[start=-1]CURL_DATA> \
			-d <CURL_DATA[end=-1]CURL_DATA>
		''';
		var fragmentNameResult = JSONCurlUtil.post("${curl}", "$..[?(@['name'] == '${fragmentName}')]");

		return "${fragmentNameResult}";
	}

	@summary = "Add a basic fragment collection."
	macro addFragmentCollection {
		if (isSet(groupName)) {
			var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");
		}
		else if (isSet(groupKey)) {
			var groupId = JSONGroup._getGroupIdByGroupKey(groupKey = "${groupKey}", site = "${site}");
		}
		else {
			fail("Please set 'groupKey or groupName to get groupId'.");
		}

		Variables.assertDefined(parameterList = "${name}");

		JSONFragment._addFragmentCollection(
			groupId = "${groupId}",
			name = "${name}");
	}

	@summary = "Add a section to a fragment collection."
	macro addSection {
		if (isSet(groupName)) {
			var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");
		}
		else if (isSet(groupKey)) {
			var groupId = JSONGroup._getGroupIdByGroupKey(groupKey = "${groupKey}", site = "${site}");
		}
		else {
			fail("Please set 'groupKey or groupName to get groupId'.");
		}

		Variables.assertDefined(parameterList = "${collectionName},${name}");

		var collectionId = JSONFragment._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		JSONFragment._addSection(
			collectionId = "${collectionId}",
			configuration = "${configuration}",
			groupId = "${groupId}",
			html = "${html}",
			name = "${name}",
			status = "${status}",
			type = "${type}");
	}

	@summary = "Assert that a fragmentCollection does not exist in a group given its collectionName and groupName"
	macro assertFragmentCollectionInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${groupName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var collectionNameResult = JSONFragment._getCollectionName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		if ("${collectionNameResult}" == "[]") {
			fail("The collection ${collectionName} was not found.");
		}
		else {
			echo("The collection ${collectionName} was found.");
		}
	}

	@summary = "Assert that a fragmentCollection does not exist in a group given its collectionName and groupName"
	macro assertFragmentCollectionNotInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${groupName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var collectionNameResult = JSONFragment._getCollectionName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		if ("${collectionNameResult}" == "[]") {
			echo("The collection ${collectionName} was not found.");
		}
		else {
			fail("The collection ${collectionName} was found.");
		}
	}

	@summary = "Assert that a fragment exists in a fragmentCollection given its collectionName, fragmentName, and groupName"
	macro assertFragmentInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName},${groupName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var fragmentCollectionId = JSONFragment._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		var fragmentNameResult = JSONFragment._getFragmentName(
			fragmentCollectionId = "${fragmentCollectionId}",
			fragmentName = "${fragmentName}",
			groupId = "${groupId}"
		);

		if ("${fragmentNameResult}" == "[]") {
			fail("The fragment ${fragmentName} was not found.");
		}
		else {
			echo("The fragment ${fragmentName} was found.");
		}
	}

	@summary = "Assert that a fragment does not exist in a group given its fragmentName"
	macro assertFragmentNotInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName},${groupName}");

		var groupId = JSONGroup._getGroupIdByName(groupName = "${groupName}");

		var fragmentCollectionId = JSONFragment._getCollectionIdByName(
			collectionName = "${collectionName}",
			groupId = "${groupId}"
		);

		var fragmentNameResult = JSONFragment._getFragmentName(
			fragmentCollectionId = "${fragmentCollectionId}",
			fragmentName = "${fragmentName}",
			groupId = "${groupId}"
		);

		if ("${fragmentNameResult}" == "[]") {
			echo("The fragment ${fragmentName} was not found.");
		}
		else {
			fail("The fragment ${fragmentName} was found.");
		}
	}

}