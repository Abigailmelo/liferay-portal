@component-name = "portal-performance-and-fault-tolerance-ee"
definition {
	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = "5"
	test StartupJDBCPING {
		property custom.properties = "cluster.link.enabled=true,cluster.link.channel.properties.control=UDP(bind_addr=${cluster.link.bind.addr["cluster-link-control"]};mcast_group_addr=${multicast.group.address["cluster-link-control"]};mcast_port=${multicast.group.port["cluster-link-control"]}):JDBC_PING(connection_driver=${jdbc.default.driverClassName};connection_url=${jdbc.default.url};connection_username=${jdbc.default.username};connection_password=${jdbc.default.password}):MERGE3(min_interval=10000;max_interval=30000):FD_SOCK:FD_ALL:VERIFY_SUSPECT(timeout=1500):pbcast.NAKACK2(xmit_interval=500;xmit_table_num_rows=100;xmit_table_msgs_per_row=2000;xmit_table_max_compaction_time=30000;max_msg_batch_size=500;use_mcast_xmit=false;discard_delivered_msgs=true):UNICAST3(xmit_interval=500;xmit_table_num_rows=100;xmit_table_msgs_per_row=2000;xmit_table_max_compaction_time=60000;conn_expiry_timeout=0;max_msg_batch_size=500):pbcast.STABLE(stability_delay=1000;desired_avg_gossip=50000;max_bytes=4M):pbcast.GMS(join_timeout=2000;print_local_addr=true;view_bundling=true):UFC(max_credits=2M;min_threshold=0.4):MFC(max_credits=2M;min_threshold=0.4):FRAG2(frag_size=60K):RSVP(resend_interval=2000;timeout=10000)";
		property test.name.skip.portal.instance = "ClusteringConfigs#StartupJDBCPING";

		AssertConsoleTextPresent(value1 = "Accepted view");
		AssertConsoleTextPresent(value1 = "channelName: liferay-channel-control");
		AssertConsoleTextPresent(value1 = "cluster=liferay-channel-control");

		var log2 = Clustering.getLogFileSpecificServer(bundleIndex = "1");

		if ((contains("${fileContent}", "Accepted view")) && \
			(contains("${fileContent}", "cluster=liferay-channel-control")) && \
			(contains("${fileContent}", "cluster=liferay-channel-control"))) {
			echo("Second node started successfully with JDBC_PING configuration");
		}
		else {
			fail("Fail to successfully start second node on JDBC_PING.");
		}
	}
}