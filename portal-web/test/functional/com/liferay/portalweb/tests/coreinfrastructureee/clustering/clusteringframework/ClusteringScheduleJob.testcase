@component-name = "portal-clustering"
definition {
	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = "3"
	test ScheduleJobOnClusterNode1 {
		property custom.properties = "cluster.link.enabled=true";
		property test.name.skip.portal.instance = "ClusteringScheduleJob#ScheduleJobOnClusterNode1";

		Clustering.viewClusterStatusInConsole();

		Clustering.enableDebugging(
			categoryName = "com.liferay.cluster.test.module.internel",
			nodePort = "9080"
		);

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.7.2.jar",
			nodePort = "8080"
		);

		Clustering.enableDebugging(
			categoryName = "com.liferay.cluster.test.module.internel",
			nodePort = "8080"
		);

		Pause(locator1 = "10000");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Memory clustered job from modules is triggered",
			nodePort = "8080"
		);

		Clustering.shutdownSpecificServer(nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-master-slave.groovy"
		);

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "This node is master node"
		);

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "Memory clustered job from modules is triggered",
			nodePort = "9080"
		);

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.7.2.jar",
			nodePort = "9080"
		);

		Clustering.enableDebugging(
			categoryName = "com.liferay.cluster.test.module.internel",
			nodePort = "9080"
		);

		Pause(locator1 = "10000");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Scheduler job com.liferay.cluster.test.module.internel.SchedulerTestMessageListener.com.liferay.cluster.test.module.internel.SchedulerTestMessageListener already exists",
			nodePort = "9080"
		);

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Memory clustered job from modules is triggered",
			nodePort = "9080"
		);
	}
}