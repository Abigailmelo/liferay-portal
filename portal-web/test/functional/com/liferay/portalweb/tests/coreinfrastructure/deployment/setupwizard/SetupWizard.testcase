@component-name = "portal-deployment-hypersonic"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.prepare.bundle.properties = "false";
	property testray.main.component.name = "Setup Wizard";

	@priority = "5"
	test HypersonicToHypersonic {
		property database.types = "hypersonic";
		property test.name.skip.portal.instance = "SetupWizard#HypersonicToHypersonic";

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.hypersonic.password"),
			databaseType = "Hypersonic",
			databaseUserName = PropsUtil.get("database.hypersonic.username"),
			jdbcDriverClassName = PropsUtil.get("database.hypersonic.driver"),
			jdbcURL = PropsUtil.get("database.hypersonic.url"));

		Smoke.viewWelcomePage();

		Smoke.runSmoke();
	}

	@priority = "5"
	test HypersonicToMySQL {
		property database.types = "mysql";
		property test.name.skip.portal.instance = "SetupWizard#HypersonicToMySQL";

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		Smoke.viewWelcomePage();

		Smoke.runSmoke();
	}

	@priority = "4"
	test HypersonicWithSpecialContent {
		property database.types = "hypersonic";
		property test.name.skip.portal.instance = "SetupWizard#HypersonicWithSpecialContent";

		SetupWizard.configurePortalNamePG(portalName = "");

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "",
			administratorFirstName = "",
			administratorLastName = "");

		Click(locator1 = "TextInput#PORTAL_NAME");

		SetupWizard.configureDatabasePG(
			databasePassword = "",
			databaseType = "Hypersonic",
			databaseUserName = "",
			jdbcDriverClassName = "",
			jdbcURL = "");

		SetupWizard.finishConfigurationPG();

		for (var fieldName : list "Portal Name,First Name,Last Name,Email,JDBC URL,JDBC Driver Class Name") {
			var key_fieldName = "${fieldName}";

			AssertTextEquals.assertPartialText(
				locator1 = "TextInput#REQUIRED_ALERT_SPECIFIC_FIELD",
				value1 = "This field is required.");
		}

		AssertTextEquals(
			locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_FIELD",
			value1 = "");

		AssertTextEquals(
			locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_FIELD",
			value1 = "");

		Refresh();

		SetupWizard.configurePortalNamePG(portalName = "1234567890!@#$%^&amp;*()~`");

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "1234567890!@#$%^&amp;*()~`",
			administratorFirstName = "1234567890!@#$%^&amp;*()~`",
			administratorLastName = "1234567890!@#$%^&amp;*()~`");

		Click(locator1 = "TextInput#PORTAL_NAME");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#FIRST_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#LAST_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#PORTAL_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ALERT",
			value1 = "Please enter a valid email address.");
	}

}