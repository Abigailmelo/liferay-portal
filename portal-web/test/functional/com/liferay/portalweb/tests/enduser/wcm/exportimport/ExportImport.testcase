@component-name = "portal-staging"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Page.tearDownPG();

			Site.tearDownCP();
		}
	}

	@description = "This is a test for LPS-84223."
	@priority = "3"
	test DLLinkValidationInWebContent {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		var dmDocumentURL = selenium.getAttribute("//input[contains(@class,'lfr-input-resource')]@value");
		var editDocumentURL = StringUtil.extractFirst("${dmDocumentURL}", "jpg");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = '''<a href="${editDocumentURL}">${editDocumentURL}</a>''',
			webContentTitle = "WC WebContent Title");

		Button.clickPublish();

		AssertTextPresent(
			locator1 = "Message#ERROR",
			value1 = "Your request failed to complete.");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Unable to validate referenced file entry because it cannot be found with the following parameters");
	}

	@priority = "4"
	test EditExportTemplate {
		property test.name.skip.portal.instance = "ExportImport#EditExportTemplate";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export");

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.configureExportSiteOptions(
			checkContentNameList = "Web Content",
			uncheckContentNameList = "Blogs");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name",
			larFileName = "Export.Template");

		Pause(locator1 = "3000");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export");

		LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

		LAR.editExportTemplateCP(
			exportTemplateDescriptionEdit = "Export Template Description Edit",
			exportTemplateName = "Export Template Name",
			exportTemplateNameEdit = "Export Template Name Edit");

		LAR.configureExportSiteOptions(checkContentNameList = "Blogs");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description Edit",
			exportTemplateName = "Export Template Name Edit",
			larFileName = "Edited Export Template Name");

		var larFileName = LAR.getLarFileName();

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		LAR.downloadLar();

		Pause(locator1 = "5000");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

		BlogsEntry.viewEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");
	}

	@priority = "5"
	test ExportImportDDLViaGlobal {
		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Page.add(
			pageName = "Test Page",
			siteName = "Site Name");

		Navigator.openSiteURL(siteName = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists");

		DDLDataDefinition.addCP(
			ddlDataDefinitionDescription = "DDL Definition Description",
			ddlDataDefinitionName = "DDL Definition");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName");

		DDLDataDefinition.save();

		Navigator.openSiteURL(siteName = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists");

		DDLList.addCP(
			ddlListDescription = "DDL List Description",
			ddlListName = "DDL List");

		DDLDataDefinition.selectCP(ddlDataDefinitionName = "DDL Definition");

		DDLDataDefinition.save();

		DDLRecord.addCP(
			ddlDataDefinitionName = "DDL Definition",
			ddlListName = "DDL List");

		DDLRecord.populateFieldText(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label",
			fieldName = "TextName");

		PortletEntry.publish();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Navigator.openSiteURL(siteName = "Global");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists");

		LAR.exportPortlet(
			larFileName = "DDL.portlet.lar",
			siteScopeName = "Global");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists");

		LAR.importPortlet(
			larFileName = "DDL.portlet.lar",
			siteName = "Site Name");

		Navigator.openURL();

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Dynamic Data Lists");

		DDLNavigator.gotoListRecords(ddlListName = "DDL List");

		DDLRecord.viewFirstFieldCP(
			ddlRecordFieldData = "DDL Definition Record",
			field = "Text",
			fieldFieldLabel = "Text Label");
	}

	@description = "This is a use case for LPS-91735."
	@priority = "3"
	test ExportImportGlobalDDMStructureViaInstances {
		property test.name.skip.portal.instance = "ExportImport#ExportImportGlobalDDMStructureViaInstances";
		property portal.release = "false";

		Navigator.openSiteLanding(siteURLKey = "Global");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export");

		LexiconEntry.gotoAdd();

		Check(locator1 = "Select#CONTENT_CHOOSE_CONTENT");

		LAR.configureExportSiteCP(
			checkContentNameList = "Web Content",
			uncheckContentNameList = "Documents and Media");

		LAR.exportSuccess();

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		User.logoutPG();

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSiteLanding(
			baseURL = "http://www.able.com:8080",
			siteURLKey = "Global");

		LAR.importSiteCP(
			baseURL = "http://www.able.com:8080",
			larFileName = "${larFileName}",
			siteName = "Global");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@description = "This is a use case for LPS-88378."
	@priority = "3"
	test ExportImportLayoutCircularReference {
		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addLayoutByGroupName(
			groupName = "Site Name",
			layoutName = "Site Page");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Page.addChild(
			page = "Public Pages",
			pageName = "Site Page",
			siteChildPageName = "Site Child Page",
			siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Page.addChild(
			page = "Public Pages",
			pageName = "Site Child Page",
			siteChildPageName = "Site Child Child Page",
			siteName = "Site Name");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoManageStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Link to Page",
			fieldFieldLabel = "Link to Page",
			fieldName = "LinkToPage");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoManageTemplates();

		WebContentTemplates.addCP(
			templateDescription = "WC Template Description",
			templateLanguage = "ftl",
			templateName = "WC Template Name");

		WebContentTemplates.addStructure(
			structureName = "WC Structure Name",
			templateFieldNames = "Link to Page",
			templateLanguage = "ftl");

		DDLDataDefinition.save();

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			linkedPageName = "Site Child Page",
			linkFieldName = "LinkToPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			linkedPageName = "Site Child Child Page",
			linkFieldName = "LinkToPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentTitle = "WC WebContent Title 2");

		PortletEntry.publish();

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Web Content Display");

		Navigator.gotoSitePage(
			pageName = "Site Page",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC WebContent Title 2");

		WebContent.viewPGViaWCD(
			linkName = "Link to Page",
			linkToPage = "true");

		Navigator.openSiteURL(siteName = "Site Name");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.openSiteLanding(siteURLKey = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name B");

		AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
	}

	@priority = "3"
	test ExportImportPortletWithADT {
		property test.name.skip.portal.instance = "ExportImport#ExportImportPortletWithADT";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Site Administration",
			portlet = "Application Display Template");

		ApplicationDisplayTemplates.addCP(
			adtFile = "adt_blogs_basic.ftl",
			adtType = "Blogs");

		Page.add(pageName = "Test Page Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoPage(pageName = "Test Page Name");

		ApplicationDisplayTemplates.selectPortletADT(templateName = "Blogs Test ADT");

		Navigator.gotoPage(pageName = "Test Page Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_THE_RECYCLE_BIN");

		LAR.configureExportSiteCP();

		LAR.exportSuccess();

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		Navigator.gotoSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		var key_entryTitle = "Blogs Entry Title";

		AssertElementNotPresent(locator1 = "Link#EDIT");

		AssertElementNotPresent(locator1 = "Link#MOVE_TO_THE_RECYCLE_BIN");
	}

	@priority = "5"
	test ExportImportPrivatePage {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExportImport#ExportImportPrivatePage";
		property testray.component.names = "Training";

		Page.add(
			pageName = "Private Page",
			sitePagePrivacy = "Private");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export");

		LAR.exportSiteCP(
			larFileName = "ExportPrivatePage",
			privateLayout = "true");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			privateLayout = "true",
			siteName = "Site Name");

		Navigator.gotoPage(
			pageName = "Private Page",
			sitePagePrivacy = "true");
	}

	@priority = "5"
	test ExportImportSampleLARPortlet {
		property portal.acceptance = "true";
		property portlet.plugins.includes = "sample-lar-portlet";

		Page.add(pageName = "Test Page Name");

		Navigator.gotoPage(pageName = "Test Page Name");

		Portlet.addPG(portletName = "Sample LAR");

		SampleLARPortlet.addSampleBooking();

		var bookingNumber = selenium.getText("//tbody[@class='table-data']/tr/td[2]");

		echo("Booking Number ${bookingNumber}");

		SampleLARPortlet.viewSampleBookingNumber(bookingNumber = "${bookingNumber}");

		LAR.exportPortlet(larFileName = "SampleLARPortlet.lar");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Test Site Name");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Page.add(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Portlet.addPG(portletName = "Sample LAR");

		LAR.importPortlet(larFileName = "SampleLARPortlet.lar");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		SampleLARPortlet.viewSampleBookingNumber(bookingNumber = "${bookingNumber}");
	}

	@description = "This is a use case for LPS-84201."
	@priority = "3"
	test ExportImportSiteWithAssetPublisherScopeSetting {
		JSONGroup.addGroup(groupName = "Site Name A");

		JSONLayout.addLayoutByGroupName(
			groupName = "Site Name A",
			layoutName = "Asset Publisher Page");

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		Portlet.addPG(portletName = "Asset Publisher");

		AssetPublisherPortlet.configureAddSiteScopes(otherSite = "Site Name B");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		AssetPublisherPortlet.removeSiteScope(removeSiteScopes = "Site Name A");

		Navigator.openSiteURL(siteName = "Site Name A");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.deleteAllCP();

		JSONGroup.addGroup(groupName = "Site Name A");

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.openSiteLanding(siteURLKey = "Site Name A");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name A");

		Navigator.gotoSitePage(
			pageName = "Asset Publisher Page",
			siteName = "Site Name A");

		AssetPublisherPortlet.viewConfigureSiteScope(siteName = "Site Name B");
	}

	@description = "This is a use case for LPS-88331."
	@priority = "3"
	test ExportImportSiteWithNestedDocumentsAndMediaField {
		JSONGroup.addGroup(groupName = "Site A");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-a");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		Navigator.openSiteLanding(siteURLKey = "Site A");

		WebContentNavigator.gotoManageStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DynamicDataMapping.addFieldNested(
			field = "Documents and Media",
			fieldFieldLabel = "Documents and Media",
			fieldName = "DocumentsAndMedia");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openSiteLanding(siteURLKey = "Site A");

		WebContentNavigator.gotoManageTemplates();

		WebContentTemplates.addCP(
			templateDescription = "WC Template Description",
			templateLanguage = "ftl",
			templateName = "WC Template Name");

		WebContentTemplates.addStructure(
			structureName = "WC Structure Name",
			templateFieldNames = "Text,Documents and Media",
			templateLanguage = "ftl");

		DDLDataDefinition.save();

		Navigator.openSiteLanding(siteURLKey = "Site A");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "DocumentsAndMedia",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentDocumentsAndMedia = "DM Document Title.txt",
			webContentText = "Web Content Text",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site A");

		JSONGroup.addGroup(groupName = "Site B");

		Navigator.openSiteLanding(siteURLKey = "Site B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site B");

		Navigator.openSiteLanding(siteURLKey = "Site B");

		WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

		WebContent.viewCP(
			webContentDocumentsAndMedia = "DM Document Title",
			webContentText = "Web Content Text",
			webContentTitle = "Web Content Title");

		AssertConsoleTextNotPresent(value1 = "com.liferay.portal.kernel.repository.InvalidRepositoryIdException");
	}

	@description = "This is a use case for LPS-54392 and LPS-88014."
	@priority = "3"
	test ExportImportSiteWithReferencedWebContent {
		JSONGroup.addGroup(groupName = "Site Name A");

		Navigator.openSiteLanding(siteURLKey = "Site Name A");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName1}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName1 = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		Page.add(
			pageName = "Test Page",
			siteName = "Site Name B");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectOtherSiteWebContent(
			otherSiteName = "Site Name A",
			webContentTitle = "Web Content Title");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName2}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName2 = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.deleteAllCP();

		Navigator.openURL();

		JSONGroup.addGroup(groupName = "Site Name C");

		LAR.importSiteCP(
			larFileName = "${larFileName1}",
			siteName = "Site Name C");

		JSONGroup.addGroup(groupName = "Site Name D");

		LAR.importSiteCP(
			larFileName = "${larFileName2}",
			siteName = "Site Name D");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@priority = "5"
	test ExportImportSmoke {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExportImport#ExportImportSmoke";
		property testray.component.names = "Training";

		LAR.configureExportSiteCP();

		AssertClick(
			locator1 = "SitePagesExport#EXPORT_BUTTON",
			value1 = "Export");

		var key_larFileName = "${larFileName}";

		AssertTextEquals.assertPartialText(
			locator1 = "SitePagesExport#CURRENT_AND_PREVIOUS_STATUS",
			value1 = "Successful");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");

		AssertConsoleTextNotPresent(value1 = "java.lang.StringIndexOutOfBoundsException");
	}

	@priority = "5"
	test ExportImportValidation {
		property portal.acceptance = "true";
		property test.name.skip.portal.instance = "ExportImport#ExportImportValidation";
		property testray.component.names = "Training";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Blogs");

		BlogsNavigator.gotoEditCP(entryTitle = "Blogs Entry Title");

		Click.pauseClickAt(locator1 = "AlloyEditor#CONTENT_FIELD");

		Click(locator1 = "AlloyEditor#CONTENT_ADD_BUTTON");

		Click(locator1 = "AlloyEditor#CONTENT_ADD_MENUBAR_IMAGE");

		ItemSelector.selectDMImage(imageFileName = "DM Document Title");

		PortletEntry.publish();

		LAR.configureExportSiteCP(
			checkContentNameList = "Blogs",
			mainContent = "Blogs",
			uncheckContentNameList = "Documents and Media",
			uncheckSubContent = "Referenced Content");

		LAR.exportSuccess();

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			importValidationMissingItem = "DM Document Title",
			larFileName = "${larFileName}",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-84204."
	@priority = "4"
	test ExportImportWCDReferenceWhenNotStagedWebContent {
		JSONGroup.addGroup(groupName = "Site Name A");

		Navigator.openSiteLanding(siteURLKey = "Site Name A");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging");

		Staging.activateStagingCP(
			siteName = "Site Name A",
			uncheckContent = "Web Content");

		Navigator.openSiteLanding(siteURLKey = "Site Name A Staging");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "Web Content Title");

		Staging.openStagingAdmin(siteURLKey = "site-name-a-staging");

		Staging.publishCustomPublication();

		JSONGroup.addGroup(groupName = "Site Name B");

		JSONLayout.addLayoutByGroupName(
			groupName = "Site Name B",
			layoutName = "Test Page");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.selectOtherSiteWebContent(
			otherSiteName = "Site Name A",
			webContentTitle = "Web Content Title");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.addGroup(groupName = "Site Name C");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name C");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name C");

		WebContent.viewPGViaWCD(webContentContent = "Web Content Content");
	}

	@description = "This is a use case for LPS-83326."
	@priority = "5"
	test ExportImportWebcontentFolderWithWorkflow {
		Navigator.openSiteLanding(siteURLKey = "Guest");

		WebContentFolder.addCP(
			folderDescription = "WC Folder Description",
			folderName = "WC Folder Name");

		WebContentFolder.configureWorkflowCP(
			folderName = "WC Folder Name",
			workflowDefinition = "Single Approver (Version 1)",
			workflowRestriction = "Default Workflow");

		Navigator.openSiteLanding(siteURLKey = "guest");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		JSONGroup.addGroup(groupName = "Site Name");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		LAR.importPortlet(larFileName = "WebContent_portlet.lar");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentFolder.viewFolderWorkflow(
			folderName = "WC Folder Name",
			workflowResourceValue = "Single Approver");
	}

	@priority = "4"
	test ExportImportWithExportTemplate {
		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Export");

		LAR.addExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.saveExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.viewExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		LAR.exportExportTemplateCP(
			exportTemplateDescription = "Export Template Description",
			exportTemplateName = "Export Template Name");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		ProductMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = "Site Name");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "Site Name");
	}

	@description = "This is a use case for LPS-88498."
	@priority = "5"
	test ExportViaGuest {
		property portal.release = "false";
		property test.name.skip.portal.instance = "ExportImport#ExportViaGuest";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		ProductMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		LAR.exportSiteCP();

		var downloadURL = selenium.getAttribute("//ul/li/div/h5/span/a@href");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		Navigator.openSpecificURL(url = "${downloadURL}");

		AssertTextEquals(
			locator1 = "Home#ERROR_MESSAGE_ALERT_ERROR",
			value1 = "Forbidden");
	}

	@description = "This is a use case for LPS-88831, LPS-88889 and LPS-88890."
	@priority = "4"
	test ExportWebContentWithDeletedReference {
		property test.name.skip.portal.instance = "ExportImport#ExportWebContentWithDeletedReference";

		JSONGroup.addGroup(groupName = "Site Name");

		JSONLayout.addLayoutByGroupName(
			groupName = "Site Name",
			layoutName = "Test Page");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoManageStructures();

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		for (var structureFieldName : list "Documents and Media,Link to Page,Image") {
			DynamicDataMapping.addField(
				field = "${structureFieldName}",
				fieldFieldLabel = "${structureFieldName}",
				fieldName = StringUtil.replace("${structureFieldName}", " ", ""));
		}

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoManageTemplates();

		WebContentTemplates.addCP(
			templateDescription = "WC Template Description",
			templateLanguage = "ftl",
			templateName = "WC Template Name");

		WebContentTemplates.addStructure(
			structureName = "WC Structure Name",
			templateFieldNames = "Documents and Media,Link to Page,Image",
			templateLanguage = "ftl");

		DDLDataDefinition.save();

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			fieldName = "DocumentsandMedia",
			linkedPageName = "Test Page",
			linkFieldName = "LinktoPage",
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentDocumentsAndMedia = "DM Document Title.txt",
			webContentImageUnderDocumentsAndMedia = "Document_1.jpg",
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

		DMDocument.deleteCP(dmDocumentTitle = "Document_1.jpg");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name");

		Page.deletePG(pageName = "Test Page");

		Navigator.openSiteLanding(siteURLKey = "Site Name");

		LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

		AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
	}

	@priority = "5"
	test ImportCorruptedFile {
		property portal.acceptance = "true";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Bookmarks");

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Bookmarks");

		LAR.importPortlet(
			cannotImport = "true",
			larFileName = "bookmarks-corrupted.portlet.lar",
			uploadFrom = "dependencies");
	}

	@description = "This is a use case for LPS-94738."
	@priority = "4"
	test ImportWCDReferenceAfterActivateStaging {
		JSONGroup.addGroup(groupName = "Site Name A");

		JSONLayout.addLayoutByGroupName(
			groupName = "Site Name A",
			layoutName = "Test Page");

		Navigator.gotoSitePage(
			pageName = "Test Page",
			siteName = "Site Name A");

		Portlet.addPG(portletName = "Web Content Display");

		WebContent.addPGViaWCD(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		WebContent.viewPGViaWCD(webContentContent = "WebContent Content");

		LAR.exportSiteCP();

		var key_larFileName = "${larFileName}";

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		JSONGroup.deleteGroupByName(groupName = "Site Name A");

		JSONGroup.addGroup(groupName = "Site Name B");

		Navigator.openSiteLanding(siteURLKey = "site-name-b");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			panel = "Site Administration",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name B");

		LAR.importSiteCP(
			larFileName = "${larFileName}",
			siteName = "site-name-b-staging");

		Navigator.gotoStagedSitePage(
			pageName = "Test Page",
			siteName = "Site Name B");

		WebContent.viewPGViaWCD(webContentContent = "WebContent Content");
	}

	@description = "This is a test for LPS-91233."
	@priority = "3"
	test PublishWebContentWithBrokenLink {
		property test.name.skip.portal.instance = "ExportImport#PublishWebContentWithBrokenLink";

		ProductMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoCategory(category = "Web Experience");

		SystemSettings.editConfiguration(configurationName = "Export/Import Service");

		FormFields.disableCheckbox(fieldName = "validateLayoutReferences");

		SystemSettings.saveConfiguration();

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		var dmDocumentURL = selenium.getAttribute("//input[contains(@class,'lfr-input-resource')]@value");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Documents and Media");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		ProductMenu.gotoPortlet(
			category = "Content",
			panel = "Site Administration",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = '''<a href="${dmDocumentURL}">${dmDocumentURL}</a>''',
			webContentTitle = "WC WebContent Title");

		PortletEntry.publish();
	}

}